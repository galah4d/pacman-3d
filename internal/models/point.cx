package main

import "gl"
import "glfw"

import "graphical"

/* Constant declaration */

// Point cell types Types
var PATH_CELL_WITH_SIMPLE_POINT i32 = 0
var PATH_CELL_WITH_SUPER_POINT i32 = 2

var point_textures [2]i32

var g_simple_points[240] SimplePoint

func loadPointTetures () {
  point_textures[0] = gl.NewTexture("assets/textures/points/simple-point-texture.png")
  point_textures[1] = gl.NewTexture("assets/textures/points/super-point-texture.jpg")
}

type Point struct {
  index_x i32
  index_y i32
  active bool
  last_update f64
}

func newPoint (line i32, collumn i32) (point Point) {
  point.index_x = collumn
  point.index_y = line
  point.active = true
  point.last_update = 0.0D
}

func (point Point) update (player_x i32, player_y i32, time f64) (point Point) {
  if bool.and(i32.eq(player_x, point.index_x), i32.eq(player_y, point.index_y)) {
    point.active = false
  }
  point.last_update = time
}

type SimplePoint struct {
  point Point
  geometry graphical.BoxGeometry
}

func newSimplePoint(line i32, collumn i32) (point SimplePoint) {
  var mat graphical.Material
  var mats [6]graphical.Material
  for i:=0; i<6; i++ {
    mat = graphical.newMaterial(1.0, 1.0, 1.0)
    mat = mat.setTexture(point_textures[0])
    mats[i] = mat
  }

  point.point = newPoint(line, collumn)
  point.geometry = graphical.newBoxGeometry(0.01, 0.01, 0.01, mats)
  point.geometry.position = getPosition3D(line, collumn)
  point.geometry.rotation = graphical.newVector3f(0.0, 0.0, 0.0)
}

func InitSimplePoints() {
  loadPointTetures()
  
  var line [28]i32

  simple_points_count := 0
  for i:=0; i<31; i++ {
    line = loadPointsLine(i)
    for j:=0; j<28; j++ {
      if line[j] == 0 {
        g_simple_points[simple_points_count] = newSimplePoint(i, j)
        simple_points_count = i32.add(simple_points_count, 1)
      }
    }
  }
}

func (point SimplePoint) update (player_x i32, player_y i32, time f64) (point SimplePoint) {
  //point.geometry.rotation.z = point.geometry.rotation.z + f64.f32(f64.mul(f64.sub(time, point.point.last_update), 20.0D))
  point.point = point.point.update(player_x, player_y, time)
  return point
}

func SimplePointRender(point SimplePoint, mode str) {
  if point.point.active {
    if mode == "2D" {
      graphical.BoxGeometryRender(point.geometry, false, false, false, false, true, false)
    } else if mode == "3D" {
      graphical.BoxGeometryRender(point.geometry, true, false, false, true, true, false)
    }
  }
}

type SuperPoint struct {
  point Point
  geometry graphical.CylinderGeometry
}

func newSuperPoint(line i32, collumn i32) (point SuperPoint) {
  var mat graphical.Material
  mat = graphical.newMaterial(1.0, 1.0, 1.0)
  mat = mat.setTexture(point_textures[1])

  point.point = newPoint(line, collumn)
  point.geometry = graphical.newCylinderGeometry(0.03, 0.02, 10, mat)
  point.geometry.position = getPosition3D(line, collumn)
  point.geometry.rotation = graphical.newVector3f(90.0, 0.0, 0.0)
}

func SuperPointUpdate (point SuperPoint) (point SuperPoint) {
  if g_player.index_x == point.point.index_x && g_player.index_y == point.point.index_y {
    point.point.active = false
  }
}

func SuperPointRender(point SuperPoint) {
  var cg graphical.CylinderGeometry
  cg = point.geometry
  if point.point.active {
    cg.render()
  }
}

func loadPointsLine(i i32) (line [28]i32) {
    if i32.eq(i, 0) {
      line = [28]i32{1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1}
    }
    if i32.eq(i, 1) {
      line = [28]i32{1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1}
    }
    if i32.eq(i, 2) {
      line = [28]i32{1,  2,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  2,  1}
    }
    if i32.eq(i, 3) {
      line = [28]i32{1,  0,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  0,  1}
    }
    if i32.eq(i, 4) {
      line = [28]i32{1,  0,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  0,  1}
    }
    if i32.eq(i, 5) {
      line = [28]i32{1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1}
    }
    if i32.eq(i, 6) {
      line = [28]i32{1,  0,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  0,  1}
    }
    if i32.eq(i, 7) {
      line = [28]i32{1,  0,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  0,  1}
    }
    if i32.eq(i, 8) {
      line = [28]i32{1,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  1}
    }
    if i32.eq(i, 9) {
      line = [28]i32{1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  3,  1,  1,  3,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1}
    }
    if i32.eq(i, 10) {
      line = [28]i32{1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  3,  1,  1,  3,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1}
    }
    if i32.eq(i, 11) {
      line = [28]i32{1,  1,  1,  1,  1,  1,  0,  1,  1,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  1,  1,  0,  1,  1,  1,  1,  1,  1}
    }
    if i32.eq(i, 12) {
      line = [28]i32{1,  1,  1,  1,  1,  1,  0,  1,  1,  3,  1,  1,  1,  5,  5,  1,  1,  1,  3,  1,  1,  0,  1,  1,  1,  1,  1,  1}
    }
    if i32.eq(i, 13) {
      line = [28]i32{1,  1,  1,  1,  1,  1,  0,  1,  1,  3,  1,  3,  3,  3,  3,  3,  3,  1,  3,  1,  1,  0,  1,  1,  1,  1,  1,  1}
    }
    if i32.eq(i, 14) {
      line = [28]i32{3,  3,  3,  3,  3,  1,  0,  3,  3,  3,  1,  3,  3,  3,  3,  3,  3,  1,  3,  3,  3,  0,  1,  3,  3,  3,  3,  3}
    }
    if i32.eq(i, 15) {
      line = [28]i32{1,  1,  1,  1,  1,  1,  0,  1,  1,  3,  1,  3,  3,  3,  3,  3,  3,  1,  3,  1,  1,  0,  1,  1,  1,  1,  1,  1}
    }
    if i32.eq(i, 16) {
      line = [28]i32{1,  1,  1,  1,  1,  1,  0,  1,  1,  3,  1,  1,  1,  1,  1,  1,  1,  1,  3,  1,  1,  0,  1,  1,  1,  1,  1,  1}
    }
    if i32.eq(i, 17) {
      line = [28]i32{1,  1,  1,  1,  1,  1,  0,  1,  1,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  1,  1,  0,  1,  1,  1,  1,  1,  1}
    }
    if i32.eq(i, 18) {
      line = [28]i32{1,  1,  1,  1,  1,  1,  0,  1,  1,  3,  1,  1,  1,  1,  1,  1,  1,  1,  3,  1,  1,  0,  1,  1,  1,  1,  1,  1}
    }
    if i32.eq(i, 19) {
      line = [28]i32{1,  1,  1,  1,  1,  1,  0,  1,  1,  3,  1,  1,  1,  1,  1,  1,  1,  1,  3,  1,  1,  0,  1,  1,  1,  1,  1,  1}
    }
    if i32.eq(i, 20) {
      line = [28]i32{1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1}
    }
    if i32.eq(i, 21) {
      line = [28]i32{1,  0,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  0,  1}
    }
    if i32.eq(i, 22) {
      line = [28]i32{1,  0,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  0,  1}
    }
    if i32.eq(i, 23) {
      line = [28]i32{1,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  3,  3,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  1}
    }
    if i32.eq(i, 24) {
      line = [28]i32{1,  1,  1,  0,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  0,  1,  1,  1}
    }
    if i32.eq(i, 25) {
      line = [28]i32{1,  1,  1,  0,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  0,  1,  1,  1}
    }
    if i32.eq(i, 26) {
      line = [28]i32{1,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  1}
    }
    if i32.eq(i, 27) {
      line = [28]i32{1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1}
    }
    if i32.eq(i, 28) {
      line = [28]i32{1,  2,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1}
    }
    if i32.eq(i, 29) {
      line = [28]i32{1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1}
    }
    if i32.eq(i, 30) {
      line = [28]i32{1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1}
    }
    return line
}
