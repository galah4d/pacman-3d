package main

import "graphical"

var CELL_TYPE_WALL i32 = 0
var CELL_TYPE_PATH i32 = 1
var CELL_TYPE_GATE i32 = 2
var CELL_TYPE_TELEPORT i32 = 3

var CELL_WIDTH f32 = 0.07
var CELL_HEIGHT f32 = 0.07
var CELL_DEPTH f32 = 0.07

var wall_cell_textures [3]i32
var gate_cell_textures [3]i32
var cell_textures [3]i32

var CELL_TEXTURES [12]i32

func loadCellTextures () {
  CELL_TEXTURES[0] = gl.NewTexture("textures/walls/wall.jpg")
  CELL_TEXTURES[1] = gl.NewTexture("textures/walls/wall2.jpg")
  CELL_TEXTURES[2] = gl.NewTexture("textures/walls/wall3.jpg")

  CELL_TEXTURES[3] = gl.NewTexture("textures/cells/gate1.jpg")
  CELL_TEXTURES[4] = gl.NewTexture("textures/cells/gate1.jpg")
  CELL_TEXTURES[5] = gl.NewTexture("textures/cells/gate1.jpg")

  CELL_TEXTURES[6] = gl.NewTexture("textures/cells/gate1.jpg")
  CELL_TEXTURES[7] = gl.NewTexture("textures/cells/gate1.jpg")
  CELL_TEXTURES[8] = gl.NewTexture("textures/cells/gate1.jpg")

  CELL_TEXTURES[9] = gl.NewTexture("textures/cells/gate1.jpg")
  CELL_TEXTURES[10] = gl.NewTexture("textures/cells/gate1.jpg")
  CELL_TEXTURES[11] = gl.NewTexture("textures/cells/gate1.jpg")
}

type Cell struct {
  index_x i32
  index_y i32
  ctype i32
	geometry graphical.BoxGeometry
}

func NewCell (line i32, collumn i32, ct i32) (cell Cell) {
  var materials [6]graphical.Material
  var mat graphical.Material

  mat = graphical.newMaterial(1.0, 1.0, 0.0)
  mat = mat.setTexture(CELL_TEXTURES[ct*3])
  for i:=0; i<2; i++ {
    materials[i] = mat
  }

  mat = graphical.newMaterial(1.0, 1.0, 0.0)
  mat = mat.setTexture(CELL_TEXTURES[ct*3 + 1])
  for i=2; i<4; i++ {
    materials[i] = mat
  }

  mat = graphical.newMaterial(1.0, 1.0, 0.0)
  mat = mat.setTexture(CELL_TEXTURES[ct*3 + 2])
  for i=4; i<6; i++ {
    materials[i] = mat
  }

  cell.index_x = collumn
  cell.index_y = line
  cell.ctype = ct
	cell.geometry = graphical.newBoxGeometry(CELL_WIDTH, CELL_HEIGHT, CELL_DEPTH, materials)
	cell.geometry.position = getPosition3D(line, collumn)

  return cell
}

func CellRender(cell Cell, mode str) {
  if cell.ctype != CELL_TYPE_PATH {
    if mode == "2D" {
      graphical.BoxGeometryRender(cell.geometry, false, false, false, false, true, false)
    } else if mode == "3D" {
      graphical.BoxGeometryRender(cell.geometry, true, false, false, true, true, false)
    }
  }
}
